type CreateAddressResponse {
  address: String!
}

type CreateBlockResponse {
  hash: String!
  number: Int!
}

type CreateBlockWithTransactionsResponse {
  hash: String!
  number: Int!
  transactions: [CreateTransactionResponse!]!
}

type CreateTransactionResponse {
  block_hash: String!
  from: String!
  hash: String!
  to: String
}

enum Direction {
  asc
  desc
}

type Query {
  address(address: String!): CreateAddressResponse!
  addresses: [CreateAddressResponse!]!
  block(hash: String!): CreateBlockResponse!
  blockByNumber(number: Int!): CreateBlockResponse!
  blockByNumberWithTransactions(number: Int!): CreateBlockWithTransactionsResponse!
  blocks(direction: Direction = asc, limit: Int!, offset: Int): [CreateBlockResponse!]!
  transaction(hash: String!): CreateTransactionResponse!
  transactions: [CreateTransactionResponse!]!
}
